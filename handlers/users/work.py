from aiogram import types
import re
from loader import bot, dp, db
from keyboards.default import categories, help_keyboard
from keyboards.inline import confirm_request
from aiogram.types import ContentTypes
from states import Steps


@dp.message_handler(commands=['create_wheel'], state=Steps.defaultState)
async def create_wheel(message: types.Message):
    try:
        await db.drop_wheel(message.from_user.id)
    except:
        pass
    await message.answer(f'–î–∞–≤–∞–π –∑–∞–ø–æ–≤–Ω–∏–º–æ –ø–æ–ª—è —Ç–≤–æ–≥–æ –∫–æ–ª–µ—Å–∞ –∂–∏—Ç—Ç—î–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É.\n–û–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.', reply_markup=categories)
    await Steps.wheel_updatingState.set()


@dp.message_handler(text="–ì–æ—Ç–æ–≤–æ‚úÖ", state=Steps.wheel_updatingState)
async def updating_wheel(message: types.Message):
    await message.answer("–ö–æ–ª–µ—Å–æ –≥–æ—Ç–æ–≤–µ, /help - –∫–æ–º–∞–Ω–¥–∏.", reply_markup=help_keyboard)
    await Steps.defaultState.set()


#  wheel create {
@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.wheel_updatingState)
async def updating_wheel(message: types.Message):
    await message.answer(f'–ß—É–¥–æ–≤–æ, —Ç–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç(–∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –≥—Ä–Ω) —Ç–∞ –¥–∞—Ç—É\n(—É –≤–∏–≥–ª—è–¥—ñ "–≤–∏—Ç—Ä–∞—Ç–∏, —Ä—ñ–∫-–º—ñ—Å—è—Ü—å-–¥–µ–Ω—å") –∑–∞ —Ü—ñ—î—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é - {message.text}\n (–Ø–∫—â–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±—Ä–∞–Ω–∞ –Ω–µ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è, –≤–≤–µ–¥—ñ—Ç—å "0")')
    if message.text == "–ö–∞—Ä'—î—Ä–∞ü§µ":
        await Steps.set_career_valueState.set()
    elif message.text == "–°—ñ–º'—èüë™":
        await Steps.set_family_valueState.set()
    elif message.text == "–û—Ç–æ—á–µ–Ω–Ω—èüçÇ":
        await Steps.set_environment_valueState.set()
    elif message.text == "–ó–¥–æ—Ä–æ–≤'—è, —Å–ø–æ—Ä—Çüèê":
        await Steps.set_health_valueState.set()
    elif message.text == "–†–æ–∑–≤–∏—Ç–æ–∫ (–æ—Å–≤—ñ—Ç–∞)üë®‚Äçüéì":
        await Steps.set_education_valueState.set()
    elif message.text == "–¢–≤–æ—Ä—á—ñ—Å—Ç—å —ñ —Ö–æ–±–±—ñüé®":
        await Steps.set_hobbies_valueState.set()
    elif message.text == "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ —Ç–∞ –ø–æ–¥–æ—Ä–æ–∂—ñüß≠":
        await Steps.set_rest_valueState.set()
    else:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_career_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_careers_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_family_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_family_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_environment_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_environment_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_hobbies_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_hobbies_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_rest_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_rest_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_education_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_education_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_health_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_health_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')
#  wheel create }


#  wheel update {
@dp.message_handler(commands=['update_wheel'], state=Steps.defaultState)
async def create_wheel(message: types.Message):
    await message.answer(f'–î–æ–¥–∞—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–∏ –¥–æ –∫–æ–ª–µ—Å–∞ –∂–∏—Ç—Ç—î–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É.\n–û–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.', reply_markup=categories)
    await Steps.wheel_updatingState.set()


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.wheel_updatingState)
async def updating_wheel(message: types.Message):
    await message.answer(f'–ß—É–¥–æ–≤–æ, —Ç–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç(–∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –≥—Ä–Ω) —Ç–∞ –¥–∞—Ç—É\n(—É –≤–∏–≥–ª—è–¥—ñ "–≤–∏—Ç—Ä–∞—Ç–∏, —Ä—ñ–∫-–º—ñ—Å—è—Ü—å-–¥–µ–Ω—å") –∑–∞ —Ü—ñ—î—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é - {message.text}\n (–Ø–∫—â–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±—Ä–∞–Ω–∞ –Ω–µ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è, –≤–≤–µ–¥—ñ—Ç—å "0")')
    if message.text == "–ö–∞—Ä'—î—Ä–∞ü§µ":
        await Steps.set_career_valueState.set()
    elif message.text == "–°—ñ–º'—èüë™":
        await Steps.set_family_valueState.set()
    elif message.text == "–û—Ç–æ—á–µ–Ω–Ω—èüçÇ":
        await Steps.set_environment_valueState.set()
    elif message.text == "–ó–¥–æ—Ä–æ–≤'—è, —Å–ø–æ—Ä—Çüèê":
        await Steps.set_health_valueState.set()
    elif message.text == "–†–æ–∑–≤–∏—Ç–æ–∫ (–æ—Å–≤—ñ—Ç–∞)üë®‚Äçüéì":
        await Steps.set_education_valueState.set()
    elif message.text == "–¢–≤–æ—Ä—á—ñ—Å—Ç—å —ñ —Ö–æ–±–±—ñüé®":
        await Steps.set_hobbies_valueState.set()
    elif message.text == "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ —Ç–∞ –ø–æ–¥–æ—Ä–æ–∂—ñüß≠":
        await Steps.set_rest_valueState.set()
    else:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_career_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_careers_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_family_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_family_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_environment_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_environment_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_hobbies_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_hobbies_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_rest_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_rest_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_education_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_education_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.set_health_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.update_health_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_updatingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')
#  wheel update }


#  wheel edit {
@dp.message_handler(commands=['edit_wheel'], state=Steps.defaultState)
async def create_wheel(message: types.Message):
    await message.answer(f'–ó–∞–¥–∞—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–ª–µ—Å–∞ –∂–∏—Ç—Ç—î–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É.\n–û–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.', reply_markup=categories)
    await Steps.wheel_editingState.set()


@dp.message_handler(text="–ì–æ—Ç–æ–≤–æ‚úÖ", state=Steps.wheel_editingState)
async def updating_wheel(message: types.Message):
    await message.answer("–ö–æ–ª–µ—Å–æ –∑–º—ñ–Ω–µ–Ω–æ, /help - –∫–æ–º–∞–Ω–¥–∏.", reply_markup=help_keyboard)
    await Steps.defaultState.set()


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.wheel_editingState)
async def updating_wheel(message: types.Message):
    await message.answer(f'–ß—É–¥–æ–≤–æ, —Ç–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç(–∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –≥—Ä–Ω) —Ç–∞ –¥–∞—Ç—É\n(—É –≤–∏–≥–ª—è–¥—ñ "–≤–∏—Ç—Ä–∞—Ç–∏, —Ä—ñ–∫-–º—ñ—Å—è—Ü—å-–¥–µ–Ω—å") –∑–∞ —Ü—ñ—î—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é - {message.text}\n')
    if message.text == "–ö–∞—Ä'—î—Ä–∞ü§µ":
        await Steps.edit_career_valueState.set()
    elif message.text == "–°—ñ–º'—èüë™":
        await Steps.edit_family_valueState.set()
    elif message.text == "–û—Ç–æ—á–µ–Ω–Ω—èüçÇ":
        await Steps.edit_environment_valueState.set()
    elif message.text == "–ó–¥–æ—Ä–æ–≤'—è, —Å–ø–æ—Ä—Çüèê":
        await Steps.edit_health_valueState.set()
    elif message.text == "–†–æ–∑–≤–∏—Ç–æ–∫ (–æ—Å–≤—ñ—Ç–∞)üë®‚Äçüéì":
        await Steps.edit_education_valueState.set()
    elif message.text == "–¢–≤–æ—Ä—á—ñ—Å—Ç—å —ñ —Ö–æ–±–±—ñüé®":
        await Steps.edit_hobbies_valueState.set()
    elif message.text == "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ —Ç–∞ –ø–æ–¥–æ—Ä–æ–∂—ñüß≠":
        await Steps.edit_rest_valueState.set()
    else:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.edit_career_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.edit_careers_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_editingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.edit_family_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.edit_family_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_editingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.edit_environment_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.edit_environment_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_editingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.edit_hobbies_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.edit_hobbies_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_editingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.edit_rest_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.edit_rest_category(message.from_user.id, message.text)
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_editingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.edit_education_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.edit_education_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_editingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')


@dp.message_handler(content_types=ContentTypes.TEXT, state=Steps.edit_health_valueState)
async def updating_wheel(message: types.Message):
    try:
        await db.edit_health_category(message.from_user.id, message.text.split(',')[0])
        await message.answer(f'–ß—É–¥–æ–≤–æ!\n–¢–µ–ø–µ—Ä —ñ–Ω—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–±–æ "–ì–æ—Ç–æ–≤–æ‚úÖ"', reply_markup=categories)
        await Steps.wheel_editingState.set()
    except:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.')
#  wheel edit }


#  wheel drop {
@dp.message_handler(commands=['drop_wheel'], state=Steps.defaultState)
async def drop_wheel(message: types.Message):
    await message.answer(f'–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–≤–æ—î –∫–æ–ª–µ—Å–æ?', reply_markup=confirm_request)
    await Steps.confirmState.set()


@dp.callback_query_handler(text="–¢–∞–∫", state=Steps.confirmState)
async def bot_drop_wheel(callback: types.callback_query):
    await db.drop_wheel(callback.from_user.id)
    await bot.send_message(callback.from_user.id, "–ö–æ–ª–µ—Å–æ –æ—á–∏—â–µ–Ω–µ. /help - –∫–æ–º–∞–Ω–¥–∏.", reply_markup=help_keyboard)
    await Steps.defaultState.set()


@dp.callback_query_handler(text="–ù—ñ", state=Steps.confirmState)
async def bot_drop_wheel(callback: types.callback_query):
    await bot.send_message(callback.from_user.id, "–û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–µ. /help - –∫–æ–º–∞–Ω–¥–∏.", reply_markup=help_keyboard)
    await Steps.defaultState.set()
#  wheel drop }
