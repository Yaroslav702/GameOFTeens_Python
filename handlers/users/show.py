from aiogram import types

from loader import dp, db
from keyboards.default import help_keyboard

from states import Steps


@dp.message_handler(commands=['show_wheel'], state=Steps.defaultState)
async def show_wheel(message: types.Message):
    categories = await db.select_categories(message.from_user.id)
    sm = [categories['category_careers'],
          categories['category_family'],
          categories['category_environment'],
          categories['category_health_sport'],
          categories['category_education'],
          categories['category_hobbies'],
          categories['category_rest']
          ]
    amount = sum(sm)
    if amount == 0:
        amount = 7
    await message.answer(
        f"""
        –í–∞—à–µ –∫–æ–ª–µ—Å–æ –≤–∏—Ç—Ä–∞—Ç:
ü§µ–ö–∞—Ä'—î—Ä–∞ ~ {round(categories['category_careers']/amount * 100, 2)}% ({categories['category_careers']} –≥—Ä–Ω)
üë™–°—ñ–º'—è ~ {round(categories['category_family']/amount * 100, 2)}% ({categories['category_family']} –≥—Ä–Ω)
üçÇ–û—Ç–æ—á–µ–Ω–Ω—è ~ {round(categories['category_environment']/amount * 100, 2)}% ({categories['category_environment']} –≥—Ä–Ω)
üèê–ó–¥–æ—Ä–æ–≤'—è, —Å–ø–æ—Ä—Ç ~ {round(categories['category_health_sport']/amount * 100, 2)}% ({categories['category_health_sport']} –≥—Ä–Ω)
üë®‚Äçüéì–†–æ–∑–≤–∏—Ç–æ–∫(–æ—Å–≤—ñ—Ç–∞) ~ {round(categories['category_education']/amount * 100, 2)}% ({categories['category_education']} –≥—Ä–Ω)
üé®–¢–≤–æ—Ä—á—ñ—Å—Ç —ñ —Ö–æ–±–±—ñ ~ {round(categories['category_hobbies']/amount * 100, 2)}% ({categories['category_hobbies']} –≥—Ä–Ω)
üß≠–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ —Ç–∞ –ø–æ–¥–æ—Ä–æ–∂—ñ ~ {round(categories['category_rest']/amount * 100, 2)}% ({categories['category_rest']} –≥—Ä–Ω)"""
    )
    accord = {
        'category_careers': "–ö–∞—Ä'—î—Ä–∞",
        'category_family': "–°—ñ–º'—è",
        'category_environment': "–û—Ç–æ—á–µ–Ω–Ω—è",
        'category_health_sport': "–ó–¥–æ—Ä–æ–≤'—è, —Å–ø–æ—Ä—Ç",
        'category_education': "–†–æ–∑–≤–∏—Ç–æ–∫(–æ—Å–≤—ñ—Ç–∞)",
        'category_hobbies': "–¢–≤–æ—Ä—á—ñ—Å—Ç —ñ —Ö–æ–±–±—ñ",
        'category_rest': "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ —Ç–∞ –ø–æ–¥–æ—Ä–æ–∂—ñ"
    }
    mn = min(sm)
    mx = max(sm)
    min_label = []
    max_label = []
    for key, val in categories.items():
        if val == mn:
            min_label.append(accord[key])
        if val == mx:
            max_label.append(accord[key])
    if mx != 0:
        await message.answer(f'–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ –Ω–∞–π–º–µ–Ω—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –≤ —Ç–∞–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:\n{", ".join(min_label)}')
        await message.answer(f'–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ –Ω–∞–π–±—ñ–ª—å—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –≤ —Ç–∞–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:\n{", ".join(max_label)}')
        await message.answer('–ù–∞–º–∞–≥–∞–π—Ç–µ—Å—å —ó—Ö –±–∞–ª–∞–Ω—Å—É–≤–∞—Ç–∏!', reply_markup=help_keyboard)
    else:
        await message.answer('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∫–æ–ª–µ—Å–æ!')
